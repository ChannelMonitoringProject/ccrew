services:

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:9092
      - 29092:29092

    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, EXTERNAL://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

  kafka-init:
    image: apache/kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      cd /opt/kafka/bin
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating broker topics'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic aisstream --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list
      "


  database:
    image: postgres
    hostname: database
    volumes:
      - database:/var/lib/postgresql
    ports:
      - "127.0.0.1:5432:5432"
    env_file:
      - env.docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack
    ports:
      - "127.0.0.1:6379:6379"

  celery_application:
    build: .
    command: celery --app ccrew.celery_app worker --loglevel DEBUG
    depends_on:
      database:
        condition: service_healthy
        # restart: true
      redis:
        condition: service_started
    env_file:
        - env.docker

  flask_application:
    build: .
    # command: python -m flask --app ccrew.flask_app run
    depends_on:
      database:
        condition: service_healthy
        # restart: true
      redis:
        condition: service_started
    env_file:
        - env.docker
    ports:
      - "127.0.0.1:8050:5000"

volumes:
  database:
